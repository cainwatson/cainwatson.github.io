{"version":3,"sources":["webpack:///./src/templates/blogPost/BlogPostHeader.jsx","webpack:///./src/templates/BlogPost.jsx"],"names":["Container","Tags","Tag","props","theme","colors","lightPink","primary","SubHeader","BlogPostHeader","post","frontmatter","title","tags","date_published","date_updated","date_published_formatted","date_updated_formatted","readingTime","fields","map","tag","key","dateTime","text","Template","data","markdownRemark","Layout","SEO","dangerouslySetInnerHTML","__html","html","posteQuery"],"mappings":"wRAIMA,EAAS,wFAITC,EAAI,yIAQJC,EAAG,4EAGE,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,YAH9B,sBAIa,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOE,UAJzC,uBAQHC,EAAS,kFA2DAC,EAvDQ,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EAQ/BA,EAAKC,YANPC,EAFiC,EAEjCA,MACAC,EAHiC,EAGjCA,KACAC,EAJiC,EAIjCA,eACAC,EALiC,EAKjCA,aACAC,EANiC,EAMjCA,yBACAC,EAPiC,EAOjCA,uBAEMC,EAAgBR,EAAKS,OAArBD,YAER,OACE,YAAClB,EAAD,KACE,sBAAKY,GACL,YAACX,EAAD,KACGY,EAAKO,KAAI,SAAAC,GAAG,OACX,YAACnB,EAAD,CAAKoB,IAAKD,GAAMA,OAGpB,YAACb,EAAD,KACE,oBAAMe,SAAUT,EAAgBF,MAAOI,GACpCA,GAEFD,GACC,iDAEE,oBAAMQ,SAAUR,EAAcH,MAAOK,GAClCA,IAIP,8BAAsBC,EAAYM,SChDpCxB,G,UAAS,+KAaA,SAASyB,EAAT,GAA6B,IAClBf,EADiB,EAARgB,KACzBC,eACAf,EAAUF,EAAKC,YAAfC,MAER,OACE,YAACgB,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,CAAKjB,MAAOA,IACZ,YAAC,EAAD,KACE,YAAC,EAAD,CAAQF,KAAMA,IACd,mBAAKoB,wBAAyB,CAAEC,OAAQrB,EAAKsB,UAM9C,IAAMC,EAAU","file":"component---src-templates-blog-post-jsx-43992460f80e245a172e.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from '@emotion/styled'\n\nconst Container = styled.header`\n  margin-bottom: 24px;\n`\n\nconst Tags = styled.ul`\n  margin: -4px;\n  padding: 0;\n  list-style-type: none;\n  display: flex;\n  flex-wrap: wrap;\n`\n\nconst Tag = styled.li`\n  margin: 4px;\n  padding: 6px 8px;\n  color: ${props => props.theme.colors.lightPink};\n  background-color: ${props => props.theme.colors.primary};\n  border-radius: 6px;\n`\n\nconst SubHeader = styled.div`\n  margin: 14px 0;\n`\n\nconst BlogPostHeader = ({ post }) => {\n  const {\n    title,\n    tags,\n    date_published,\n    date_updated,\n    date_published_formatted,\n    date_updated_formatted,\n  } = post.frontmatter\n  const { readingTime } = post.fields\n\n  return (\n    <Container>\n      <h1>{title}</h1>\n      <Tags>\n        {tags.map(tag => (\n          <Tag key={tag}>{tag}</Tag>\n        ))}\n      </Tags>\n      <SubHeader>\n        <time dateTime={date_published} title={date_published_formatted}>\n          {date_published_formatted}\n        </time>\n        {date_updated && (\n          <>\n            , Updated&nbsp;\n            <time dateTime={date_updated} title={date_updated_formatted}>\n              {date_updated_formatted}\n            </time>\n          </>\n        )}\n        <span>&nbsp;&middot; {readingTime.text}</span>\n      </SubHeader>\n    </Container>\n  )\n}\n\nBlogPostHeader.propTypes = {\n  post: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      tags: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n      date_published: PropTypes.string.isRequired,\n      date_updated: PropTypes.string.isRequired,\n      date_published_formatted: PropTypes.string.isRequired,\n      date_updated_formatted: PropTypes.string.isRequired,\n    }).isRequired,\n    fields: PropTypes.shape({\n      readingTime: PropTypes.shape({\n        text: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n}\n\nexport default BlogPostHeader\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport styled from '@emotion/styled'\n\nimport Layout from '@components/Layout'\nimport SEO from '@components/SEO'\nimport Header from './blogPost/BlogPostHeader'\n\nimport './blogPost/night-owl-theme.css'\n\nconst Container = styled.section`\n  margin: 0 auto;\n  padding: 20px;\n\n  code {\n    font-family: 'Fira Mono', monospace;\n  }\n\n  @media (min-width: 1024px) {\n    width: 50%;\n  }\n`\n\nexport default function Template({ data }) {\n  const { markdownRemark: post } = data\n  const { title } = post.frontmatter\n\n  return (\n    <Layout>\n      <SEO title={title} />\n      <Container>\n        <Header post={post} />\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n      </Container>\n    </Layout>\n  )\n}\n\nexport const posteQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        slug\n        title\n        tags\n        date_updated\n        date_published\n        date_published_formatted: date_published(formatString: \"MMMM DD, YYYY\")\n        date_updated_formatted: date_updated(formatString: \"MMMM DD, YYYY\")\n      }\n      fields {\n        readingTime {\n          text\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}