{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/creating-a-vanilla-http-server-in-node-js/","result":{"data":{"markdownRemark":{"html":"<p>There are so many tutorials out there using Express, but what does Express use? In this post, we're going to use the native HTTP module to create a vanilla Node server and get a better understanding of Node and HTTP.</p>\n<h2>Getting started</h2>\n<p>First, make sure you have Node installed and then create a <code>server.js</code> file. Inside the file let's require the HTTP module:</p>\n<pre><code class=\"language-js\">const http = require('http')\n</code></pre>\n<p>We don't need to <code>npm install</code> this because the HTTP module comes along with Node.</p>\n<p>Now let's create our server and have it listen on port <code>8080</code>.</p>\n<pre><code class=\"language-js\">...\nconst PORT = 8080;\nconst server = http.createServer((request, response) => {\n  console.log('Request made to server!');\n});\n\nserver.listen(PORT, () => {\n  console.log(`Server listening on port :${PORT} üöÄ`);\n});\n</code></pre>\n<ul>\n<li>The <code>.createServer</code> method takes in a callback that will be invoked when <em>any</em> request is made to our server once it's started. The callback takes in two parameters that we'll utilize soon.</li>\n<li>The <code>.listen</code> method takes in the port our server will run on and a callback. It will start the server and then invoke the callback.</li>\n</ul>\n<p>Now let's run this with the following command in the terminal:</p>\n<pre><code class=\"language-sh\">$ node server.js\nServer listening on port :8080 üöÄ\n</code></pre>\n<h2>Making requests to our server</h2>\n<p>Awesome! We've created our server and if we try to make any requests to it we should see the log run.</p>\n<p>Here I opened up another terminal and used a command-line tool called cURL to send requests to our server. You could also use a more friendly tool such as Postman or even your browser if you wanted to.</p>\n<pre><code class=\"language-sh\">curl -i localhost:8080/\n</code></pre>\n<p>Notice I added this 'localhost' before the port. This is because you need to say what the host of the server is when you make a request to it and localhost automatically points to your own machine. You could also use <code>127.0.0.1:8080</code> as well, but that's a little bit harder to remember.</p>\n<p>Now, if we check back to the other terminal running the server we see:</p>\n<pre><code class=\"language-sh\">$ node server.js\nServer listening on port :8080 üöÄ\nRequest made to server!\n</code></pre>\n<p>Great. Now, there's actually a small problem we need to fix. When we make a request to our server, it definitely comes through, but currently, our server doesn't respond. Leaving our client (like cURL/Postman/Browser) waiting and waiting until they give up.</p>\n<h2>Responding</h2>\n<p>This is where the <code>response</code> parameter to <code>.createServer</code> comes into play. As the variable name hints at, <code>response</code> will be an object that we can use for dealing with the response of any HTTP request sent to our server.</p>\n<p>Two important methods of response are <code>.writeHead</code> and <code>.end</code>.</p>\n<pre><code class=\"language-js\">...\nconst server = http.createServer((request, response) => {\n  console.log('Request made to server!');\n\n  const headers = {\n    'Content-Type': 'text/plain'\n  };\n  let statusCode = 200;\n  let body = 'Hello, world!';\n\n  response.writeHead(statusCode, headers);\n  response.end(body);\n});\n...\n</code></pre>\n<ul>\n<li>The <code>.writeHead</code> method takes in the status code and optional headers you want to be sent back to the client. Note: It only prepares the response and doesn't actually respond.</li>\n<li>The <code>.end</code> method optionally takes in a string to be sent as the body of the response and then sends off the request.</li>\n</ul>\n<p>Now, we need to restart our server so it is running our new code. Press Ctrl-C in your terminal running the server and then re-run the <code>node server.js</code> command to boot the server up again.</p>\n<p>If we try to make a request to our server now, we'll see we get a response:</p>\n<pre><code class=\"language-sh\">$ curl -i localhost:8080/\nHTTP/1.1 200 OK\nContent-Type: text/plain\nDate: Fri, 26 Jun 2020 00:51:26 GMT\nConnection: keep-alive\nTransfer-Encoding: chunked\n\nHello, world!%\n</code></pre>\n<h2>Routing</h2>\n<p>This is great, but most of the time we want to perform different actions based on the request method and endpoint. This is where the <code>request</code> object comes in, giving us <code>request.url</code> and <code>request.method</code>:</p>\n<pre><code class=\"language-js\">...\nconst server = http.createServer((request, response) => {\n  console.log('Request made to server!');\n\n  const headers = {\n    'Content-Type': 'text/plain'\n  };\n  let statusCode = 404;\n  let body = 'Not Found';\n\n  if (request.url === '/') {\n    if (request.method === 'GET') {\n      statusCode = 200;\n      body = 'Hello, world!';\n    }\n  } else if (request.url === '/bananas') {\n    if (request.method === 'GET') {\n      statusCode = 200;\n      body = 'üçåüçåüçå';\n    } else if (request.method === 'POST') {\n      // Save new banana\n      statusCode = 201;\n      body = 'Banana saved!';\n    } else {\n      // ...others such as PUT, PATCH, DELETE\n    }\n  }\n\n  response.writeHead(statusCode, headers);\n  response.end(body);\n});\n...\n</code></pre>\n<p>We used some <code>if</code>s to change what our server does and responds with based on the endpoint and method. Btw, don't forget to restart your server after changing the code!</p>\n<h2>Wrapping up</h2>\n<p>We've now built a server using Node without any framework. Woo!</p>\n<p>Now while frameworks definitely make building servers much easier, it can be fun to look under the hood sometimes.</p>","frontmatter":{"slug":"/creating-a-vanilla-http-server-in-node-js","title":"Creating a Vanilla HTTP Server in Node.js","tags":["node","http"],"date_updated":"2020-05-25T00:00:00.000Z","date_published":"2017-06-18T00:00:00.000Z","date_published_formatted":"June 18, 2017","date_updated_formatted":"May 25, 2020"}}},"pageContext":{"slug":"/creating-a-vanilla-http-server-in-node-js","previous":null,"next":null}}}